---
title: "Regresión Logística"
subtitle: ""
autor: "Jesús Turpín"
format:
  html:
    code-fold: true
editor: visual
toc: true
toc-depth: 3
---

# Problema de regresión logística de predicción de Hipotiroidismo

El dataset es original de UCI ML repository. [Link](https://archive.ics.uci.edu/dataset/102/thyroid+disease)
[Enlace a Kaggle](https://www.kaggle.com/datasets/bidemiayinde/thyroid-sickness-determination)

En este notebook tomaremos como referencia el material del profesor Dr. Tirthajyoti Sarkar donde demuestra como resolver un problema de regresión logística de predicción de Hipotiroidismo.

## 1. Carga de librerías y dataset

```{r echo=FALSE, warning=FALSE, message=FALSE}
library(tidyverse)
library(broom)
# library(ggrepel)
library(caret)
library(glmnet)
library(skimr)
```

El archivo viene sin cabeceras, por lo que tenemos que añadir los nombres de las columnas

```{r warning=FALSE, message=FALSE}
names <- c('response', 'age', 'sex', 'on_thyroxine', 'query_on_thyroxine', 
           'antithyroid_medication', 'thyroid_surgery', 'query_hypothyroid', 
           'query_hyperthyroid', 'pregnant', 'sick', 'tumor', 'lithium', 
           'goitre', 'TSH_measured', 'TSH', 'T3_measured', 'T3', 
           'TT4_measured', 'TT4', 'T4U_measured', 'T4U', 'FTI_measured', 
           'FTI', 'TBG_measured', 'TBG')

df <- read_csv("data/hypothyroid.csv", col_names = names, na = c("", " ", "NA", "?"))
```

Estructura del fichero:

```{r}
glimpse(df)
```
## 2. Preprocesamiento

Borrar columnas con la palabra measured y query.

```{r}
df <- df %>%
  select(-contains("measured"), -contains("query"), -TBG) 
```

```{r}
glimpse(df)
```
Convertimos a factor las variables categóricas:

```{r}
df <- df %>%
  mutate_if(is.character, factor) 
```

```{r}
summary(df)
```
```{r}
df %>%
  filter(is.na(sex), pregnant)
```


```{r}
skim(df)
```
Tratamos los valores NA.

```{r}
df$any_na <- rowSums(is.na(df))> 0
df %>%
  group_by(any_na) %>%
  summarise(Count = n(),
            PositiveResponse = sum(response == "hypothyroid"),
            Percentage = (PositiveResponse / Count) * 100)
```
Tenemos un buen % de filas con alguna variable NA, más de 1/3 del total, además vemos que los que no tienen NA son algo más propensos a tener positivos. No obstante, como no somos expertos en la materia, vamos a simplificar el tratamiento de NA, eliminando todas las filas con valores NA.

```{r}
df <- na.omit(df)
```

```{r}
df %>% filter(any_na)
```
```{r}
glimpse(df)
```
1	age	446	0.8589946	51.154214	19.2944052	1	35.00	54.00	67.000	
2	TSH	468	0.8520392	5.923180	23.8994673	0	0.00	0.70	2.300	
3	T3	695	0.7802719	1.939749	0.9967734	0	1.40	1.80	2.300	
4	TT4	249	0.9212773	108.850000	45.4854185	2	83.00	104.00	128.000	
5	T4U	248	0.9215934	0.978199	0.2265796	0	0.85	0.96	1.065	
6	FTI



```{r}
# Cargar los datos
data <- df

# Transformar la variable objetivo en binaria si es necesario
data$response <- as.factor(data$response)

# Transformar variables categóricas en dummies
data <- data %>%
  mutate(across(where(is.logical), as.factor)) %>%
  mutate_if(is.factor, as.numeric) %>%
  mutate_if(is.character, as.factor)
```

```{r}
glimpse(data)
```
```{r}
# Dividir los datos en conjuntos de entrenamiento y prueba
set.seed(123) # Para reproducibilidad
trainIndex <- createDataPartition(data$response, p = .8, 
                                  list = FALSE, 
                                  times = 1)
trainData <- data[trainIndex,]
testData <- data[-trainIndex,]
```

```{r}
# Escalar las variables numéricas
preProcValues <- preProcess(trainData, method = c("center", "scale"))

trainData <- predict(preProcValues, trainData)
testData <- predict(preProcValues, testData)
```


```{r}
# Ajustar el modelo de regresión logística con regularización Ridge
set.seed(123)
model <- glmnet(as.matrix(trainData[, -1]), trainData$response, 
                family = "binomial", alpha = 0)
```





# Predecir y evaluar el modelo
predictions <- predict(model, as.matrix(testData[, -1]), s = "lambda.min", type = "response")
predictedClass <- ifelse(predictions > 0.5, 1, 0)
confusionMatrix(predictedClass, testData$response)

```


